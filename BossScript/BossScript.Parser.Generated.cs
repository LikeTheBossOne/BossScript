// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 2/5/2023 6:50:41 PM
// Input file <BossScript.Language.grammar.y - 2/5/2023 6:49:58 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace BossScript
{
internal enum TokenType {
    error=127,EOF=128,BREAK=129,DOUBLE=130,ELSE=131,FOR=132,
    IF=133,INT=134,RETURN=135,VOID=136,WHILE=137,IDENTIFIER=138,
    CLASSNAME=139,CLASS=140,STRING=141,BOOL=142,INT_LIT=143,DOUBLE_LIT=144,
    STRING_LIT=145,BOOL_LIT=146,NULL_VAL=147,LESS_THAN_OR_EQUAL=148,GREATER_THAN_OR_EQUAL=149,IS_EQUAL_TO=150,
    NOT_EQUAL_TO=151,LOGICAL_AND=152,LOGICAL_OR=153,INCREMENT=154,DECREMENT=155,PUBLIC=156,
    STATIC=157};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ParserVal,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ParserVal yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ParserVal val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class BossScriptParser: ShiftReduceParser<ParserVal, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[130];
  private static State[] states = new State[209];
  private static string[] nonTerms = new string[] {
      "ClassDecl", "$accept", "ClassBody", "ClassBodyDecls", "ClassBodyDecl", 
      "FieldDecl", "MethodDecl", "ConstructorDecl", "Type", "VarDecls", "Name", 
      "QualifiedName", "VarDeclarator", "MethodHeader", "Block", "MethodReturnVal", 
      "MethodDeclarator", "FormalParmListOpt", "FormalParmList", "FormalParm", 
      "BlockStmtsOpt", "BlockStmts", "BlockStmt", "LocalVarDeclStmt", "Stmt", 
      "LocalVarDecl", "ExprStmt", "BreakStmt", "ReturnStmt", "IfThenStmt", "IfThenElseStmt", 
      "IfThenElseIfStmt", "WhileStmt", "ForStmt", "StmtExpr", "Assignment", "MethodCall", 
      "InstantiationExpr", "Expr", "ElseIfSequence", "ElseIfStmt", "ForInit", 
      "ExprOpt", "ForUpdate", "StmtExprList", "Primary", "Literal", "FieldAccess", 
      "ArgListOpt", "ArgList", "PostFixExpr", "UnaryExpr", "MulExpr", "AddExpr", 
      "RelOp", "RelExpr", "EqExpr", "CondAndExpr", "CondOrExpr", "LeftHandSide", 
      "AssignOp", };

  static BossScriptParser() {
    states[0] = new State(new int[]{156,3},new int[]{-1,1});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{140,4});
    states[4] = new State(new int[]{138,5});
    states[5] = new State(new int[]{123,7},new int[]{-3,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{125,207,134,21,130,22,142,23,141,24,136,25,138,29,156,197},new int[]{-4,8,-5,208,-6,11,-9,12,-11,26,-12,39,-7,41,-14,42,-8,204,-17,205});
    states[8] = new State(new int[]{125,9,134,21,130,22,142,23,141,24,136,25,138,29,156,197},new int[]{-5,10,-6,11,-9,12,-11,26,-12,39,-7,41,-14,42,-8,204,-17,205});
    states[9] = new State(-3);
    states[10] = new State(-6);
    states[11] = new State(-7);
    states[12] = new State(new int[]{138,19},new int[]{-10,13,-13,20});
    states[13] = new State(new int[]{59,14,44,15});
    states[14] = new State(-10);
    states[15] = new State(new int[]{138,19},new int[]{-13,16});
    states[16] = new State(new int[]{91,17,59,-21,44,-21});
    states[17] = new State(new int[]{93,18});
    states[18] = new State(-23);
    states[19] = new State(-22);
    states[20] = new State(new int[]{91,17,59,-20,44,-20});
    states[21] = new State(-11);
    states[22] = new State(-12);
    states[23] = new State(-13);
    states[24] = new State(-14);
    states[25] = new State(-15);
    states[26] = new State(new int[]{46,27,138,-16});
    states[27] = new State(new int[]{138,28});
    states[28] = new State(-19);
    states[29] = new State(new int[]{40,30,46,-17,138,-17});
    states[30] = new State(new int[]{134,21,130,22,142,23,141,24,136,25,138,38,41,-30},new int[]{-18,31,-19,33,-20,40,-9,36,-11,26,-12,39});
    states[31] = new State(new int[]{41,32});
    states[32] = new State(-28);
    states[33] = new State(new int[]{44,34,41,-29});
    states[34] = new State(new int[]{134,21,130,22,142,23,141,24,136,25,138,38},new int[]{-20,35,-9,36,-11,26,-12,39});
    states[35] = new State(-32);
    states[36] = new State(new int[]{138,19},new int[]{-13,37});
    states[37] = new State(new int[]{91,17,44,-33,41,-33});
    states[38] = new State(-17);
    states[39] = new State(-18);
    states[40] = new State(-31);
    states[41] = new State(-8);
    states[42] = new State(new int[]{123,44},new int[]{-15,43});
    states[43] = new State(-24);
    states[44] = new State(new int[]{134,21,130,22,142,23,141,24,136,25,138,38,123,44,59,137,143,101,144,102,146,103,145,104,147,105,40,116,129,146,135,149,133,154,137,175,132,182,125,-37},new int[]{-21,45,-22,47,-23,49,-24,50,-26,51,-9,53,-11,55,-12,39,-25,135,-15,136,-27,138,-35,139,-36,141,-60,126,-48,120,-46,142,-47,100,-37,143,-38,144,-28,145,-29,148,-30,153,-31,172,-32,173,-33,174,-34,181});
    states[45] = new State(new int[]{125,46});
    states[46] = new State(-35);
    states[47] = new State(new int[]{134,21,130,22,142,23,141,24,136,25,138,38,123,44,59,137,143,101,144,102,146,103,145,104,147,105,40,116,129,146,135,149,133,154,137,175,132,182,125,-36},new int[]{-22,48,-23,49,-24,50,-26,51,-9,53,-11,55,-12,39,-25,135,-15,136,-27,138,-35,139,-36,141,-60,126,-48,120,-46,142,-47,100,-37,143,-38,144,-28,145,-29,148,-30,153,-31,172,-32,173,-33,174,-34,181});
    states[48] = new State(new int[]{134,21,130,22,142,23,141,24,136,25,138,38,123,44,59,137,143,101,144,102,146,103,145,104,147,105,40,116,129,146,135,149,133,154,137,175,132,182,125,-39},new int[]{-22,48,-23,49,-24,50,-26,51,-9,53,-11,55,-12,39,-25,135,-15,136,-27,138,-35,139,-36,141,-60,126,-48,120,-46,142,-47,100,-37,143,-38,144,-28,145,-29,148,-30,153,-31,172,-32,173,-33,174,-34,181});
    states[49] = new State(-38);
    states[50] = new State(-40);
    states[51] = new State(new int[]{59,52});
    states[52] = new State(-42);
    states[53] = new State(new int[]{138,19},new int[]{-10,54,-13,20});
    states[54] = new State(new int[]{44,15,59,-43});
    states[55] = new State(new int[]{46,27,40,56,123,122,138,-16,61,-125,154,-125,155,-125});
    states[56] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,41,-91},new int[]{-49,57,-50,59,-39,86,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[57] = new State(new int[]{41,58});
    states[58] = new State(new int[]{59,-87,46,-93,44,-87,41,-87});
    states[59] = new State(new int[]{44,60,41,-90,125,-90});
    states[60] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,61,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[61] = new State(-89);
    states[62] = new State(new int[]{153,63,44,-122,41,-122,125,-122,59,-122});
    states[63] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-58,64,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[64] = new State(new int[]{152,65,153,-121,44,-121,41,-121,125,-121,59,-121});
    states[65] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-57,66,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[66] = new State(new int[]{150,67,151,89,152,-119,153,-119,44,-119,41,-119,125,-119,59,-119});
    states[67] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-56,68,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[68] = new State(new int[]{148,91,149,92,60,93,62,94,150,-116,151,-116,152,-116,153,-116,44,-116,41,-116,125,-116,59,-116},new int[]{-55,69});
    states[69] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-54,70,-53,113,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[70] = new State(new int[]{43,71,45,96,148,-114,149,-114,60,-114,62,-114,150,-114,151,-114,152,-114,153,-114,44,-114,41,-114,125,-114,59,-114});
    states[71] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-53,72,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[72] = new State(new int[]{42,73,47,98,37,114,43,-107,45,-107,148,-107,149,-107,60,-107,62,-107,150,-107,151,-107,152,-107,153,-107,44,-107,41,-107,125,-107,59,-107});
    states[73] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-52,74,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[74] = new State(-103);
    states[75] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-52,76,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[76] = new State(-99);
    states[77] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-52,78,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[78] = new State(-100);
    states[79] = new State(-101);
    states[80] = new State(new int[]{46,81,42,-97,47,-97,37,-97,43,-97,45,-97,148,-97,149,-97,60,-97,62,-97,150,-97,151,-97,152,-97,153,-97,44,-97,41,-97,125,-97,59,-97});
    states[81] = new State(new int[]{138,82});
    states[82] = new State(new int[]{40,83,123,132,61,-92,154,-92,155,-92,46,-92,42,-92,47,-92,37,-92,43,-92,45,-92,148,-92,149,-92,60,-92,62,-92,150,-92,151,-92,152,-92,153,-92,44,-92,41,-92,125,-92,59,-92});
    states[83] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,41,-91},new int[]{-49,84,-50,59,-39,86,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[84] = new State(new int[]{41,85});
    states[85] = new State(-95);
    states[86] = new State(-88);
    states[87] = new State(new int[]{152,65,153,-120,44,-120,41,-120,125,-120,59,-120});
    states[88] = new State(new int[]{150,67,151,89,152,-118,153,-118,44,-118,41,-118,125,-118,59,-118});
    states[89] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-56,90,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[90] = new State(new int[]{148,91,149,92,60,93,62,94,150,-117,151,-117,152,-117,153,-117,44,-117,41,-117,125,-117,59,-117},new int[]{-55,69});
    states[91] = new State(-109);
    states[92] = new State(-110);
    states[93] = new State(-111);
    states[94] = new State(-112);
    states[95] = new State(new int[]{43,71,45,96,148,-113,149,-113,60,-113,62,-113,150,-113,151,-113,152,-113,153,-113,44,-113,41,-113,125,-113,59,-113});
    states[96] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-53,97,-52,119,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[97] = new State(new int[]{42,73,47,98,37,114,43,-108,45,-108,148,-108,149,-108,60,-108,62,-108,150,-108,151,-108,152,-108,153,-108,44,-108,41,-108,125,-108,59,-108});
    states[98] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-52,99,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[99] = new State(-104);
    states[100] = new State(-78);
    states[101] = new State(-82);
    states[102] = new State(-83);
    states[103] = new State(-84);
    states[104] = new State(-85);
    states[105] = new State(-86);
    states[106] = new State(-79);
    states[107] = new State(-80);
    states[108] = new State(new int[]{40,109,46,27,123,122,42,-98,47,-98,37,-98,43,-98,45,-98,148,-98,149,-98,60,-98,62,-98,150,-98,151,-98,152,-98,153,-98,44,-98,41,-98,125,-98,59,-98});
    states[109] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,41,-91},new int[]{-49,110,-50,59,-39,86,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[110] = new State(new int[]{41,111});
    states[111] = new State(-93);
    states[112] = new State(new int[]{148,91,149,92,60,93,62,94,150,-115,151,-115,152,-115,153,-115,44,-115,41,-115,125,-115,59,-115},new int[]{-55,69});
    states[113] = new State(new int[]{42,73,47,98,37,114,43,-106,45,-106,148,-106,149,-106,60,-106,62,-106,150,-106,151,-106,152,-106,153,-106,44,-106,41,-106,125,-106,59,-106});
    states[114] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-52,115,-51,79,-46,80,-47,100,-48,106,-37,107,-11,108,-12,39});
    states[115] = new State(-105);
    states[116] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,117,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[117] = new State(new int[]{41,118});
    states[118] = new State(-81);
    states[119] = new State(-102);
    states[120] = new State(new int[]{46,-79,42,-79,47,-79,37,-79,43,-79,45,-79,148,-79,149,-79,60,-79,62,-79,150,-79,151,-79,152,-79,153,-79,44,-79,41,-79,125,-79,59,-79,61,-126,154,-126,155,-126});
    states[121] = new State(new int[]{40,109,46,27,123,122,42,-98,47,-98,37,-98,43,-98,45,-98,148,-98,149,-98,60,-98,62,-98,150,-98,151,-98,152,-98,153,-98,44,-98,41,-98,125,-98,59,-98,61,-125,154,-125,155,-125});
    states[122] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,125,-91},new int[]{-49,123,-50,59,-39,86,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[123] = new State(new int[]{125,124});
    states[124] = new State(-94);
    states[125] = new State(-123);
    states[126] = new State(new int[]{61,129,154,130,155,131},new int[]{-61,127});
    states[127] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,128,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[128] = new State(-124);
    states[129] = new State(-127);
    states[130] = new State(-128);
    states[131] = new State(-129);
    states[132] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,125,-91},new int[]{-49,133,-50,59,-39,86,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[133] = new State(new int[]{125,134});
    states[134] = new State(-96);
    states[135] = new State(-41);
    states[136] = new State(-44);
    states[137] = new State(-45);
    states[138] = new State(-46);
    states[139] = new State(new int[]{59,140});
    states[140] = new State(-54);
    states[141] = new State(-55);
    states[142] = new State(new int[]{46,81});
    states[143] = new State(new int[]{46,-80,59,-56,44,-56,41,-56});
    states[144] = new State(-57);
    states[145] = new State(-47);
    states[146] = new State(new int[]{59,147});
    states[147] = new State(-76);
    states[148] = new State(-48);
    states[149] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,59,-71},new int[]{-43,150,-39,152,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[150] = new State(new int[]{59,151});
    states[151] = new State(-77);
    states[152] = new State(-70);
    states[153] = new State(-49);
    states[154] = new State(new int[]{40,155});
    states[155] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,156,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[156] = new State(new int[]{41,157});
    states[157] = new State(new int[]{123,44},new int[]{-15,158});
    states[158] = new State(new int[]{131,159,134,-58,130,-58,142,-58,141,-58,136,-58,138,-58,123,-58,59,-58,143,-58,144,-58,146,-58,145,-58,147,-58,40,-58,129,-58,135,-58,133,-58,137,-58,132,-58,125,-58},new int[]{-40,167,-41,171});
    states[159] = new State(new int[]{123,44,133,162},new int[]{-15,160,-30,161});
    states[160] = new State(-59);
    states[161] = new State(-64);
    states[162] = new State(new int[]{40,163});
    states[163] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,164,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[164] = new State(new int[]{41,165});
    states[165] = new State(new int[]{123,44},new int[]{-15,166});
    states[166] = new State(-58);
    states[167] = new State(new int[]{131,168,134,-60,130,-60,142,-60,141,-60,136,-60,138,-60,123,-60,59,-60,143,-60,144,-60,146,-60,145,-60,147,-60,40,-60,129,-60,135,-60,133,-60,137,-60,132,-60,125,-60},new int[]{-41,170});
    states[168] = new State(new int[]{123,44,133,162},new int[]{-15,169,-30,161});
    states[169] = new State(-61);
    states[170] = new State(-63);
    states[171] = new State(-62);
    states[172] = new State(-50);
    states[173] = new State(-51);
    states[174] = new State(-52);
    states[175] = new State(new int[]{40,176});
    states[176] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116},new int[]{-39,177,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[177] = new State(new int[]{41,178});
    states[178] = new State(new int[]{123,44,59,137,138,38,143,101,144,102,146,103,145,104,147,105,40,116,129,146,135,149,133,154,137,175,132,182},new int[]{-25,179,-15,136,-27,138,-35,139,-36,141,-60,126,-11,180,-12,39,-48,120,-46,142,-47,100,-37,143,-38,144,-28,145,-29,148,-30,153,-31,172,-32,173,-33,174,-34,181});
    states[179] = new State(-65);
    states[180] = new State(new int[]{46,27,40,56,123,122,61,-125,154,-125,155,-125});
    states[181] = new State(-53);
    states[182] = new State(new int[]{40,183});
    states[183] = new State(new int[]{138,38,143,101,144,102,146,103,145,104,147,105,40,116,134,21,130,22,142,23,141,24,136,25,59,-69},new int[]{-42,184,-45,195,-35,194,-36,141,-60,126,-11,55,-12,39,-48,120,-46,142,-47,100,-37,143,-38,144,-26,196,-9,53});
    states[184] = new State(new int[]{59,185});
    states[185] = new State(new int[]{45,75,33,77,143,101,144,102,146,103,145,104,147,105,138,38,40,116,59,-71},new int[]{-43,186,-39,152,-59,62,-58,87,-57,88,-56,112,-54,95,-53,113,-52,119,-51,79,-46,80,-47,100,-48,120,-37,107,-11,121,-12,39,-36,125,-60,126});
    states[186] = new State(new int[]{59,187});
    states[187] = new State(new int[]{138,38,143,101,144,102,146,103,145,104,147,105,40,116,41,-73},new int[]{-44,188,-45,191,-35,194,-36,141,-60,126,-11,180,-12,39,-48,120,-46,142,-47,100,-37,143,-38,144});
    states[188] = new State(new int[]{41,189});
    states[189] = new State(new int[]{123,44},new int[]{-15,190});
    states[190] = new State(-66);
    states[191] = new State(new int[]{44,192,41,-72});
    states[192] = new State(new int[]{138,38,143,101,144,102,146,103,145,104,147,105,40,116},new int[]{-35,193,-36,141,-60,126,-11,180,-12,39,-48,120,-46,142,-47,100,-37,143,-38,144});
    states[193] = new State(-75);
    states[194] = new State(-74);
    states[195] = new State(new int[]{44,192,59,-67});
    states[196] = new State(-68);
    states[197] = new State(new int[]{157,198});
    states[198] = new State(new int[]{134,21,130,22,142,23,141,24,136,203,138,38},new int[]{-16,199,-9,202,-11,26,-12,39});
    states[199] = new State(new int[]{138,201},new int[]{-17,200});
    states[200] = new State(-27);
    states[201] = new State(new int[]{40,30});
    states[202] = new State(-25);
    states[203] = new State(-15);
    states[204] = new State(-9);
    states[205] = new State(new int[]{123,44},new int[]{-15,206});
    states[206] = new State(-34);
    states[207] = new State(-4);
    states[208] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{156,140,138,-3});
    rules[3] = new Rule(-3, new int[]{123,-4,125});
    rules[4] = new Rule(-3, new int[]{123,125});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-4,-5});
    rules[7] = new Rule(-5, new int[]{-6});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-5, new int[]{-8});
    rules[10] = new Rule(-6, new int[]{-9,-10,59});
    rules[11] = new Rule(-9, new int[]{134});
    rules[12] = new Rule(-9, new int[]{130});
    rules[13] = new Rule(-9, new int[]{142});
    rules[14] = new Rule(-9, new int[]{141});
    rules[15] = new Rule(-9, new int[]{136});
    rules[16] = new Rule(-9, new int[]{-11});
    rules[17] = new Rule(-11, new int[]{138});
    rules[18] = new Rule(-11, new int[]{-12});
    rules[19] = new Rule(-12, new int[]{-11,46,138});
    rules[20] = new Rule(-10, new int[]{-13});
    rules[21] = new Rule(-10, new int[]{-10,44,-13});
    rules[22] = new Rule(-13, new int[]{138});
    rules[23] = new Rule(-13, new int[]{-13,91,93});
    rules[24] = new Rule(-7, new int[]{-14,-15});
    rules[25] = new Rule(-16, new int[]{-9});
    rules[26] = new Rule(-16, new int[]{136});
    rules[27] = new Rule(-14, new int[]{156,157,-16,-17});
    rules[28] = new Rule(-17, new int[]{138,40,-18,41});
    rules[29] = new Rule(-18, new int[]{-19});
    rules[30] = new Rule(-18, new int[]{});
    rules[31] = new Rule(-19, new int[]{-20});
    rules[32] = new Rule(-19, new int[]{-19,44,-20});
    rules[33] = new Rule(-20, new int[]{-9,-13});
    rules[34] = new Rule(-8, new int[]{-17,-15});
    rules[35] = new Rule(-15, new int[]{123,-21,125});
    rules[36] = new Rule(-21, new int[]{-22});
    rules[37] = new Rule(-21, new int[]{});
    rules[38] = new Rule(-22, new int[]{-23});
    rules[39] = new Rule(-22, new int[]{-22,-22});
    rules[40] = new Rule(-23, new int[]{-24});
    rules[41] = new Rule(-23, new int[]{-25});
    rules[42] = new Rule(-24, new int[]{-26,59});
    rules[43] = new Rule(-26, new int[]{-9,-10});
    rules[44] = new Rule(-25, new int[]{-15});
    rules[45] = new Rule(-25, new int[]{59});
    rules[46] = new Rule(-25, new int[]{-27});
    rules[47] = new Rule(-25, new int[]{-28});
    rules[48] = new Rule(-25, new int[]{-29});
    rules[49] = new Rule(-25, new int[]{-30});
    rules[50] = new Rule(-25, new int[]{-31});
    rules[51] = new Rule(-25, new int[]{-32});
    rules[52] = new Rule(-25, new int[]{-33});
    rules[53] = new Rule(-25, new int[]{-34});
    rules[54] = new Rule(-27, new int[]{-35,59});
    rules[55] = new Rule(-35, new int[]{-36});
    rules[56] = new Rule(-35, new int[]{-37});
    rules[57] = new Rule(-35, new int[]{-38});
    rules[58] = new Rule(-30, new int[]{133,40,-39,41,-15});
    rules[59] = new Rule(-31, new int[]{133,40,-39,41,-15,131,-15});
    rules[60] = new Rule(-32, new int[]{133,40,-39,41,-15,-40});
    rules[61] = new Rule(-32, new int[]{133,40,-39,41,-15,-40,131,-15});
    rules[62] = new Rule(-40, new int[]{-41});
    rules[63] = new Rule(-40, new int[]{-40,-41});
    rules[64] = new Rule(-41, new int[]{131,-30});
    rules[65] = new Rule(-33, new int[]{137,40,-39,41,-25});
    rules[66] = new Rule(-34, new int[]{132,40,-42,59,-43,59,-44,41,-15});
    rules[67] = new Rule(-42, new int[]{-45});
    rules[68] = new Rule(-42, new int[]{-26});
    rules[69] = new Rule(-42, new int[]{});
    rules[70] = new Rule(-43, new int[]{-39});
    rules[71] = new Rule(-43, new int[]{});
    rules[72] = new Rule(-44, new int[]{-45});
    rules[73] = new Rule(-44, new int[]{});
    rules[74] = new Rule(-45, new int[]{-35});
    rules[75] = new Rule(-45, new int[]{-45,44,-35});
    rules[76] = new Rule(-28, new int[]{129,59});
    rules[77] = new Rule(-29, new int[]{135,-43,59});
    rules[78] = new Rule(-46, new int[]{-47});
    rules[79] = new Rule(-46, new int[]{-48});
    rules[80] = new Rule(-46, new int[]{-37});
    rules[81] = new Rule(-46, new int[]{40,-39,41});
    rules[82] = new Rule(-47, new int[]{143});
    rules[83] = new Rule(-47, new int[]{144});
    rules[84] = new Rule(-47, new int[]{146});
    rules[85] = new Rule(-47, new int[]{145});
    rules[86] = new Rule(-47, new int[]{147});
    rules[87] = new Rule(-38, new int[]{-11,40,-49,41});
    rules[88] = new Rule(-50, new int[]{-39});
    rules[89] = new Rule(-50, new int[]{-50,44,-39});
    rules[90] = new Rule(-49, new int[]{-50});
    rules[91] = new Rule(-49, new int[]{});
    rules[92] = new Rule(-48, new int[]{-46,46,138});
    rules[93] = new Rule(-37, new int[]{-11,40,-49,41});
    rules[94] = new Rule(-37, new int[]{-11,123,-49,125});
    rules[95] = new Rule(-37, new int[]{-46,46,138,40,-49,41});
    rules[96] = new Rule(-37, new int[]{-46,46,138,123,-49,125});
    rules[97] = new Rule(-51, new int[]{-46});
    rules[98] = new Rule(-51, new int[]{-11});
    rules[99] = new Rule(-52, new int[]{45,-52});
    rules[100] = new Rule(-52, new int[]{33,-52});
    rules[101] = new Rule(-52, new int[]{-51});
    rules[102] = new Rule(-53, new int[]{-52});
    rules[103] = new Rule(-53, new int[]{-53,42,-52});
    rules[104] = new Rule(-53, new int[]{-53,47,-52});
    rules[105] = new Rule(-53, new int[]{-53,37,-52});
    rules[106] = new Rule(-54, new int[]{-53});
    rules[107] = new Rule(-54, new int[]{-54,43,-53});
    rules[108] = new Rule(-54, new int[]{-54,45,-53});
    rules[109] = new Rule(-55, new int[]{148});
    rules[110] = new Rule(-55, new int[]{149});
    rules[111] = new Rule(-55, new int[]{60});
    rules[112] = new Rule(-55, new int[]{62});
    rules[113] = new Rule(-56, new int[]{-54});
    rules[114] = new Rule(-56, new int[]{-56,-55,-54});
    rules[115] = new Rule(-57, new int[]{-56});
    rules[116] = new Rule(-57, new int[]{-57,150,-56});
    rules[117] = new Rule(-57, new int[]{-57,151,-56});
    rules[118] = new Rule(-58, new int[]{-57});
    rules[119] = new Rule(-58, new int[]{-58,152,-57});
    rules[120] = new Rule(-59, new int[]{-58});
    rules[121] = new Rule(-59, new int[]{-59,153,-58});
    rules[122] = new Rule(-39, new int[]{-59});
    rules[123] = new Rule(-39, new int[]{-36});
    rules[124] = new Rule(-36, new int[]{-60,-61,-39});
    rules[125] = new Rule(-60, new int[]{-11});
    rules[126] = new Rule(-60, new int[]{-48});
    rules[127] = new Rule(-61, new int[]{61});
    rules[128] = new Rule(-61, new int[]{154});
    rules[129] = new Rule(-61, new int[]{155});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)TokenType.error, (int)TokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // ClassDecl -> PUBLIC, CLASS, IDENTIFIER, ClassBody
{
						CurrentSemanticValue=MakeNode("ClassDecl",1000,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
						RootVal = CurrentSemanticValue;
					}
        break;
      case 3: // ClassBody -> '{', ClassBodyDecls, '}'
{
						CurrentSemanticValue=MakeNode("ClassBody",1010,ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 4: // ClassBody -> '{', '}'
{
						CurrentSemanticValue=MakeNode("ClassBody",1011);
					}
        break;
      case 6: // ClassBodyDecls -> ClassBodyDecls, ClassBodyDecl
{
						CurrentSemanticValue=MakeNode("ClassBodyDecls",1020,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 10: // FieldDecl -> Type, VarDecls, ';'
{
						CurrentSemanticValue=MakeNode("FieldDecl",1030,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 19: // QualifiedName -> Name, '.', IDENTIFIER
{
						CurrentSemanticValue=MakeNode("QualifiedName",1040,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 21: // VarDecls -> VarDecls, ',', VarDeclarator
{
						CurrentSemanticValue=MakeNode("VarDecls",1050,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 23: // VarDeclarator -> VarDeclarator, '[', ']'
{
						CurrentSemanticValue=MakeNode("VarDeclarator",1060,ValueStack[ValueStack.Depth-3]);
					}
        break;
      case 24: // MethodDecl -> MethodHeader, Block
{
						CurrentSemanticValue=MakeNode("MethodDecl",1380,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 27: // MethodHeader -> PUBLIC, STATIC, MethodReturnVal, MethodDeclarator
{
						CurrentSemanticValue=MakeNode("MethodHeader",1070,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 28: // MethodDeclarator -> IDENTIFIER, '(', FormalParmListOpt, ')'
{ 
						CurrentSemanticValue=MakeNode("MethodDeclarator",1080,ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 32: // FormalParmList -> FormalParmList, ',', FormalParm
{ 
						CurrentSemanticValue=MakeNode("FormalParmList",1090,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 33: // FormalParm -> Type, VarDeclarator
{
						CurrentSemanticValue=MakeNode("FormalParm",1100,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 34: // ConstructorDecl -> MethodDeclarator, Block
{
						CurrentSemanticValue=MakeNode("ConstructorDecl",1110,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 35: // Block -> '{', BlockStmtsOpt, '}'
{
						CurrentSemanticValue=MakeNode("Block",1200,ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 39: // BlockStmts -> BlockStmts, BlockStmts
{
						CurrentSemanticValue=MakeNode("BlockStmts",1130,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 43: // LocalVarDecl -> Type, VarDecls
{
						CurrentSemanticValue=MakeNode("LocalVarDecl",1140,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 58: // IfThenStmt -> IF, '(', Expr, ')', Block
{
						CurrentSemanticValue=MakeNode("IfThenStmt",1150,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 59: // IfThenElseStmt -> IF, '(', Expr, ')', Block, ELSE, Block
{
						CurrentSemanticValue=MakeNode("IfThenElseStmt",1160,ValueStack[ValueStack.Depth-5],ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 60: // IfThenElseIfStmt -> IF, '(', Expr, ')', Block, ElseIfSequence
{
						CurrentSemanticValue=MakeNode("IfThenElseIfStmt",1170,ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 61: // IfThenElseIfStmt -> IF, '(', Expr, ')', Block, ElseIfSequence, ELSE, Block
{
						CurrentSemanticValue=MakeNode("IfThenElseIfStmt",1171,ValueStack[ValueStack.Depth-6],ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 63: // ElseIfSequence -> ElseIfSequence, ElseIfStmt
{
						CurrentSemanticValue=MakeNode("ElseIfSequence",1180,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 64: // ElseIfStmt -> ELSE, IfThenStmt
{
						CurrentSemanticValue=MakeNode("ElseIfStmt",1190,ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 65: // WhileStmt -> WHILE, '(', Expr, ')', Stmt
{
						CurrentSemanticValue=MakeNode("WhileStmt",1210,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 66: // ForStmt -> FOR, '(', ForInit, ';', ExprOpt, ';', ForUpdate, ')', Block
{
						CurrentSemanticValue=MakeNode("ForStmt",1220,ValueStack[ValueStack.Depth-7],ValueStack[ValueStack.Depth-5],ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 75: // StmtExprList -> StmtExprList, ',', StmtExpr
{
						CurrentSemanticValue=MakeNode("StmtExprList",1230,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 77: // ReturnStmt -> RETURN, ExprOpt, ';'
{
						CurrentSemanticValue=MakeNode("ReturnStmt",1250,ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 81: // Primary -> '(', Expr, ')'
{
						CurrentSemanticValue=ValueStack[ValueStack.Depth-2];
					}
        break;
      case 87: // InstantiationExpr -> Name, '(', ArgListOpt, ')'
{
						CurrentSemanticValue=MakeNode("InstantiationExpr",1260,ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 89: // ArgList -> ArgList, ',', Expr
{
						CurrentSemanticValue=MakeNode("ArgList",1270,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 92: // FieldAccess -> Primary, '.', IDENTIFIER
{
						CurrentSemanticValue=MakeNode("FieldAccess",1280,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 93: // MethodCall -> Name, '(', ArgListOpt, ')'
{
						CurrentSemanticValue=MakeNode("MethodCall",1290,ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 94: // MethodCall -> Name, '{', ArgListOpt, '}'
{
						CurrentSemanticValue=MakeNode("MethodCall",1291,ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 95: // MethodCall -> Primary, '.', IDENTIFIER, '(', ArgListOpt, ')'
{
						CurrentSemanticValue=MakeNode("MethodCall",1292,ValueStack[ValueStack.Depth-6],ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 96: // MethodCall -> Primary, '.', IDENTIFIER, '{', ArgListOpt, '}'
{
						CurrentSemanticValue=MakeNode("MethodCall",1293,ValueStack[ValueStack.Depth-6],ValueStack[ValueStack.Depth-4],ValueStack[ValueStack.Depth-2]);
					}
        break;
      case 99: // UnaryExpr -> '-', UnaryExpr
{
						CurrentSemanticValue=MakeNode("UnaryExpr",1300,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 100: // UnaryExpr -> '!', UnaryExpr
{
						CurrentSemanticValue=MakeNode("UnaryExpr",1301,ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 103: // MulExpr -> MulExpr, '*', UnaryExpr
{
						CurrentSemanticValue=MakeNode("MulExpr",1310,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 104: // MulExpr -> MulExpr, '/', UnaryExpr
{
						CurrentSemanticValue=MakeNode("MulExpr",1311,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 105: // MulExpr -> MulExpr, '%', UnaryExpr
{
						CurrentSemanticValue=MakeNode("MulExpr",1312,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 107: // AddExpr -> AddExpr, '+', MulExpr
{
						CurrentSemanticValue=MakeNode("AddExpr",1320,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 108: // AddExpr -> AddExpr, '-', MulExpr
{
						CurrentSemanticValue=MakeNode("AddExpr",1320,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 114: // RelExpr -> RelExpr, RelOp, AddExpr
{
						CurrentSemanticValue=MakeNode("RelExpr",1330,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 116: // EqExpr -> EqExpr, IS_EQUAL_TO, RelExpr
{
						CurrentSemanticValue=MakeNode("EqExpr",1340,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 117: // EqExpr -> EqExpr, NOT_EQUAL_TO, RelExpr
{
						CurrentSemanticValue=MakeNode("EqExpr",1341,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 119: // CondAndExpr -> CondAndExpr, LOGICAL_AND, EqExpr
{
						CurrentSemanticValue=MakeNode("CondAndExpr",1350,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 121: // CondOrExpr -> CondOrExpr, LOGICAL_OR, CondAndExpr
{
						CurrentSemanticValue=MakeNode("CondOrExpr",1360,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-1]);
					}
        break;
      case 124: // Assignment -> LeftHandSide, AssignOp, Expr
{
						CurrentSemanticValue=MakeNode("Assignment",1370,ValueStack[ValueStack.Depth-3],ValueStack[ValueStack.Depth-2],ValueStack[ValueStack.Depth-1]);
					}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((TokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((TokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
